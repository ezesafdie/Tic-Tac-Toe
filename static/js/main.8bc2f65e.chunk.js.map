{"version":3,"sources":["utils/WinnerCalculator.js","components/Cell/Cell.js","components/Board/Board.js","components/ResultModal/ResultModal.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["winningMatrix","0","1","2","3","4","5","6","7","8","Cell","props","cellClasses","classNames","cell","winner","canHighlight","cellContentClasses","populated","value","className","onClick","Board","cells","cellValues","map","index","winningCombination","indexOf","cellClicked","id","ResultModal","resultModalClassNames","isGameOver","message","onNewGameClicked","Game","useState","setCellValues","setWinningCombination","isXNext","setIsXNext","setIsGameOver","numberOfTurnsLeft","setNumberOfTurnsLeft","setWinner","cellIndex","isCellEmpty","newCellValues","newNumberOfTurnsLeft","calculateResults","winningRanges","i","length","currentValue","firstOption","secondOption","hasResult","undefined","calculateWinner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bc2f65e.chunk.js","sourcesContent":["const winningMatrix = {\r\n  0: [\r\n    [1, 2],\r\n    [3, 6],\r\n    [4, 8],\r\n  ],\r\n  1: [\r\n    [0, 2],\r\n    [4, 7],\r\n  ],\r\n  2: [\r\n    [0, 1],\r\n    [5, 8],\r\n    [4, 6],\r\n  ],\r\n  3: [\r\n    [0, 6],\r\n    [4, 5],\r\n  ],\r\n  4: [\r\n    [2, 6],\r\n    [3, 5],\r\n    [1, 7],\r\n    [0, 8],\r\n  ],\r\n  5: [\r\n    [3, 4],\r\n    [2, 8],\r\n  ],\r\n  6: [\r\n    [7, 8],\r\n    [0, 3],\r\n    [2, 4],\r\n  ],\r\n  7: [\r\n    [6, 8],\r\n    [1, 4],\r\n  ],\r\n  8: [\r\n    [6, 7],\r\n    [2, 5],\r\n    [0, 4],\r\n  ],\r\n};\r\n\r\nexport const calculateWinner = (cellValues, numberOfTurnsLeft, cellIndex) => {\r\n  // Check all the possible combinations of winning with the current cell\r\n  const winningRanges = winningMatrix[cellIndex];\r\n\r\n  for (let i = 0; i < winningRanges.length; i++) {\r\n    // Looping through the winning combinations and add them to differnts varables to check if they are all the same value\r\n    const currentValue = cellValues[cellIndex];\r\n    const firstOption = cellValues[winningRanges[i][0]];\r\n    const secondOption = cellValues[winningRanges[i][1]];\r\n\r\n    if (currentValue === firstOption && currentValue === secondOption) {\r\n      // If all the values are the same it means that the player has won\r\n      // Return the winning combination and the winner\r\n      return {\r\n        hasResult: true,\r\n        winner: currentValue,\r\n        winningCombination: [\r\n          cellIndex,\r\n          winningRanges[i][0],\r\n          winningRanges[i][1],\r\n        ],\r\n      };\r\n    }\r\n\r\n    // If there is no winner and the number of turns left is 0 it means that the game is over\r\n    if (numberOfTurnsLeft === 0) {\r\n      return {\r\n        hasResult: true,\r\n        winner: undefined,\r\n        winningCombination: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  // If there is no winner and the number of turns left is not 0 it means that the game is not over\r\n  return {\r\n    hasResult: false,\r\n    winner: undefined,\r\n    winningCombination: [],\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport \"./Cell.css\";\r\n\r\nexport const Cell = (props) => {\r\n  const cellClasses = classNames({\r\n    cell: true,\r\n    winner: props.canHighlight, // If the cell is part of the winning combination, highlight it with the winner class\r\n  });\r\n\r\n  const cellContentClasses = classNames({\r\n    \"cell-content\": true,\r\n    populated: props.value, // If the cell is populated, add the populated class to it to show the value of the cell\r\n  });\r\n\r\n  return (\r\n    // Add the click event to the cell to handle the click of a cell in Game.js\r\n    <button className={cellClasses} onClick={props.onClick}>\r\n      {/* Add the cell class to the button */}\r\n      {/* Add the cell content classes */}\r\n      <span className={cellContentClasses}>{props.value}</span>\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Cell } from \"../Cell/Cell\";\r\nimport \"./Board.css\";\r\n\r\nexport const Board = (props) => {\r\n  const cells = props.cellValues.map((value, index) => {\r\n    // Run through the array of cell values sended in Game.js\r\n    const canHighlight =\r\n      props.winningCombination && props.winningCombination.indexOf(index) >= 0; // Check the winning combination to see if the cell should be highlighted\r\n    return (\r\n      <Cell\r\n        key={index}\r\n        value={value}\r\n        canHighlight={canHighlight}\r\n        onClick={() => {\r\n          props.cellClicked(index); // Call the function to handle the click of a cell in Game.js\r\n        }}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div id=\"board\">{cells}</div>;\r\n};\r\n","import React from \"react\";\r\nimport \"./ResultModal.css\";\r\nimport classNames from \"classnames\";\r\n\r\nexport const ResultModal = (props) => {\r\n  // Check if the game is over, if so, show the result modal\r\n  const resultModalClassNames = classNames({\r\n    \"modal-open\": props.isGameOver,\r\n  });\r\n\r\n  const message = props.winner ? `Winner is ${props.winner}` : \"It's a tie\"; // Check if there is a winner, if so, show the winner, otherwise show the tie\r\n  return (\r\n    <div id=\"modal-overlay\" className={resultModalClassNames}>\r\n      <div id=\"game-result-modal\">\r\n        <div id=\"result-container\">\r\n          <div id=\"winner-container\">\r\n            <span>{message}</span>\r\n          </div>\r\n        </div>\r\n        <div id=\"new-game-container\">\r\n          <button id=\"new-game-button\" onClick={props.onNewGameClicked}>\r\n            {/* Calling the function to restart the game in Game.js */}\r\n            Start New Game\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { calculateWinner } from \"../../utils/WinnerCalculator\";\r\nimport { Board } from \"../Board/Board\";\r\nimport { ResultModal } from \"../ResultModal/ResultModal\";\r\nimport \"./Game.css\";\r\n\r\nexport const Game = () => {\r\n  // Initialize the state of the game with an empty board, no winner, no game over, X as next player and all turns left\r\n  const [cellValues, setCellValues] = useState([\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n  ]);\r\n  const [winningCombination, setWinningCombination] = useState([]);\r\n  const [isXNext, setIsXNext] = useState(true);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [numberOfTurnsLeft, setNumberOfTurnsLeft] = useState(9);\r\n  const [winner, setWinner] = useState();\r\n\r\n  // Function to handle the click of a cell. It check if the cell is empty\r\n  const isCellEmpty = (cellIndex) => cellValues[cellIndex] === \"\";\r\n\r\n  // Function to restart the game\r\n  const restartGame = () => {\r\n    setCellValues([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n    setIsXNext(true);\r\n    setIsGameOver(false);\r\n    setNumberOfTurnsLeft(9);\r\n    setWinner(undefined);\r\n    setWinningCombination([]);\r\n  };\r\n\r\n  // Function to handle the click of a cell. It check if the cell is empty\r\n  const onCellClicked = (cellIndex) => {\r\n    if (isCellEmpty(cellIndex)) {\r\n      // If the cell is empty\r\n      const newCellValues = [...cellValues]; // Copy the array of cell values\r\n      newCellValues[cellIndex] = isXNext ? \"X\" : \"O\"; // Set the value of the cell to X or O depending on the next player\r\n\r\n      const newNumberOfTurnsLeft = numberOfTurnsLeft - 1; // Decrease the number of turns left by 1\r\n\r\n      // Calculate the results with the WinnerCalculator\r\n      const calculateResults = calculateWinner(\r\n        newCellValues,\r\n        newNumberOfTurnsLeft,\r\n        cellIndex\r\n      );\r\n\r\n      // Set the new values\r\n      setCellValues(newCellValues);\r\n      setIsXNext(!isXNext);\r\n      setIsGameOver(calculateResults.hasResult);\r\n      setNumberOfTurnsLeft(newNumberOfTurnsLeft);\r\n      setWinner(calculateResults.winner);\r\n      setWinningCombination(calculateResults.winningCombination);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"game\">\r\n        <h1>Tic Tac Toe</h1>\r\n        {/* Generate a board */}\r\n        <Board\r\n          cellValues={cellValues}\r\n          winningCombination={winningCombination}\r\n          cellClicked={onCellClicked}\r\n        />\r\n      </div>\r\n\r\n      {/* The modal appears in case the game has finished. Otherwise, it keeps with \"display: none\" */}\r\n      <ResultModal\r\n        isGameOver={isGameOver}\r\n        winner={winner}\r\n        onNewGameClicked={restartGame}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import { Game } from \"./components/Game/Game.js\";\n\nfunction App() {\n  return (\n    <>\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}